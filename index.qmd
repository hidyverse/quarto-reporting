---
format:
  revealjs:
    theme: [default, assets/custom.scss]
    logo: assets/dsi.png
    code-link: true
    incremental: true
---

# Quarto for Reproducible Reporting {background-image="assets/geometryClouds.png," background-opacity=".6"}

Fall 2022 Literate Programming Workshops

Heidi Steiner, PSM \| Data Science Educator

```{r}
#| label: setup
#| include: false


library(knitr)
library(kableExtra)
```

::: footer
Content is a mixture of \[RStudio Education materials\](https://github.com/rstudio-education), CC-BY. All art (unless otherwise noted) is by \[Desirée De Leon\](https://desiree.rbind.io/) and \[Allison Horst\](https://www.allisonhorst.com/), CC-BY-NC-ND.
:::

## `r fontawesome::fa("exclamation-triangle")`

I am a health scientist and NOT a computer scientist!

I am very much still learning Quarto, RMarkdown, R, etc.

## `r fontawesome::fa("step-backward")`

How are we on installations?

Tour of RStudio IDE

::: notes
Add "getting started" slide for hands-on

-   About me
-   Quick intros
-   Check download
-   Tour of RStudio IDE
:::

## Quarto

> Quarto® is an open-source scientific and technical publishing system built to dramatically improve the process of creating and collaborating

![](images/horst_quarto_schematic.png){fig-alt="Graphic showing R, Python, Julia, and Observable languages flowing to Quarto and then on to html, PDF, and MS Word documents"}

::: notes
lowering the activation energy to reproducible reporting in MANY ways

I think it's totally appropriate to stop here and ask how folks feel about the term open/reproducible
:::

## 

Quarto documents, and other **"literate programming"** documents such as `.rmd` and `.ipynb`, include code, prose, and results in a single human-readable file

![](images/rmarkdown_wizards.png){style="margin-top: -10px;" width="800"}

::: notes
same here! stop and ask folks how they feel about the term literate programming
:::

## Change your mental model

[![](images/drakeMeme.jpeg){fig-alt="drake meme shaking head at copy/paste and encouraging source -> output models" fig-align="center"}](https://twitter.com/ijeamaka_a/status/1367242513782763521)

## Your Turn `r fontawesome::fa("location-arrow")` {.your-turn}

-   Clone `https://github.com/hidyverse/quarto-examples` to RStudio

<!-- -->

-   Open `index.qmd`

-   Render `r fontawesome::fa("play")`

::: callout-tip
## Hints

-   If you're not new to these concepts, feel free to be flexible with these directions! Comfy outside of RStudio? Give VSCode a try.

-   RStudio *should* tell you when something needs to be installed...pay close attention!
:::

## Change your mental model

::: columns
::: {.column style="width: \"50%;"}
Source ↔ output

![](images/word.png){fig-alt="screenshot of blank word.docx" width="707"}
:::

::: {.column style="width"}
Source → output

![](images/Screen%20Shot%202022-08-26%20at%209.11.15%20AM.png)
:::
:::

## Change your mental model

::: columns
::: {.column style="width: \"50%;"}
Source ↔ output

![](images/haba-elise.jpg){fig-alt="Small plastic doll of a white girl in a pink and green outfit"}
:::

::: {.column style="width"}
Source → output

![](images/doll.png){fig-alt="plastic doll with textile clothing, hair of a white girl in pink and green outfit"}
:::
:::

## Same doll, different occasions

[![](images/reproducibility_dolls.png){fig-alt="plastic doll with textile clothing, hair of white girl wearing four different themed outfits" fig-align="center" width="3000"}](https://www.americangirl.com/shop/c/welliewishers)

## Same ~~doll~~ source, different occasions

![](images/reproducibility_dolls.png){fig-alt="plastic doll with textile clothing, hair of white girl wearing four different themed outfits" fig-align="center" width="3000"}

## Let's dive in. {background-image="images/diveInQuarto.png," color="#E2E9EB," background-size="\"contain\","}

## Anatomy of a `.qmd`

::: {.columns margin-right=" -20px,"} ::: {.column style="width: 20%"} ::: {style="color: #A95C42; font-size: 1.2em"} 1. Metadata 2. Markup 3. Code 4. Output ::: :::

::: {.column style="width: 70%"}
![](images/anatomy.jpeg){fig-alt="illustration of a document with arrows to include metadata, text, code, and output" fig-align="right" width="1034"}
:::

:::

## Metadata: YAML

::: columns
::: {.column style="width: 50%"}
"YAML Ain't Markup Language"

``` {.yaml execute="FALSE"}
---

key: value

---
```

-   Save options in your YAML

    -   "setup" chunk

-   `format: html`
:::

::: {.column style="width: 50%"}
![](images/orchestra.jpg){fig-alt="the back of an illustrated orchestra conductor" fig-align="right"}
:::
:::

## Your Turn `r fontawesome::fa("location-arrow")` {.your-turn}

-   Update the YAML header of `index.qmd` to add a Table of Contents

-   Add links for the included code

::: callout-tip
## Hints

-   Did you try RStudio's tab-completion feature?
-   re-render often when you make changes to your YAML!
:::

## Markdown (...is a Markup language)

``` markdown
# Heading 1
This is a sentence with some **bold text**, some *italic text* and an 
![image](image.png){fig-alt="Alt text for this image"}.
```

![](images/markdown.png){width="496"}

::: {style="font-size: .8em"}
\^\^ Check out [commonmark](https://commonmark.org/help/tutorial/) for a tutorial on common markup languages!
:::

::: notes
stop and show visual editor here
:::

## Your Turn `r fontawesome::fa("location-arrow")` {.your-turn}

-   Add an image (with or without the visual editor) with markdown

-   Add a blockquote text section (with or without the visual editor) with markdown

## Code

::: columns
::: {.column style="width: 60%"}
    ```{{r}}
    library(dplyr)
    mtcars |> 
      group_by(cyl) |> 
      summarize(mean = mean(mpg))
    ```

</br>

    ```{{python}}
    from siuba import _, group_by, summarize
    from siuba.data import mtcars
    (mtcars
      >> group_by(_.cyl)
      >> summarize(avg_mpg = _.mpg.mean())
      )
    ```
:::

::: {.column style="width: 35%; padding-left: 50px;"}
    ```{{ojs}}
    {
      let sum = 0;
      for (let i = 0; i < 10; ++i) {
        sum += i;
      }
      return sum;
    }
    ```

</br>

    ```{{julia}}
    using Plots

    plot(sin, 
         x->sin(2x), 
         0, 
         2π, 
         leg=false, 
         fill=(0,:lavender))
    ```
:::
:::

## Your Turn `r fontawesome::fa("location-arrow")` {.your-turn}

-   Investigate `Intro_to_Python.ipynb` (Can you open it?)

-   Find your Terminal within RStudio

-   Convert your `ipynb` to `qmd` with `quarto convert Intro_to_Python.ipynb`

## Keep your happy place

![](https://quarto.org/docs/tools/images/jupyterlab-preview.png){fig-alt="A screenshot of a Quarto document rendered inside JupyterLab" width="395"}

## Keep your happy place

![](https://quarto.org/docs/computations/images/python-vscode.png){fig-alt="A screenshot of a Quarto document rendered inside VSCode" width="395"}

## Nearly limitless output formats {.center .middle}

</br>

![](images/knitOutput.png){width="850"}

## Your Turn `r fontawesome::fa("location-arrow")` {.your-turn}

-   `quarto create-project --type=website` , render
-   *Add* a PDF output format
-   Change your website into a book `r fontawesome::fa("book-medical")` by updating `navbar: top` to `sidebar: contents`

::: notes
You don't have to decide on your document right away like blogdown v. bookdown , and you don't have to choose just one
:::

## Render and Send 'er `r fontawesome::fa("paper-plane")`

In general, if it renders, it's safe to send!

![](images/Screen%20Shot%202022-08-26%20at%2012.14.25%20PM.png){fig-alt="screenshot of UArizona RStudio Connect service"}

## Style your `qmd`

CSS

``` {.css echo="fenced"}
.body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}
```

scss = CSS +

``` {.scss echo="fenced"}
/*-- scss:defaults --*/

$font-stack: Helvetica, sans-serif;
$primary-color: #333;


/*-- scss:rules --*/

.body {
  font: 100% $font-stack;
  color: $primary-color;
}
```

## Awesome Quarto `r fontawesome::fa("search")`

[![](images/Screen%20Shot%202022-08-26%20at%2012.49.09%20PM.png){width="537"}](https://github.com/mcanouil/awesome-quarto)

::: callout-tip
## Hint

"awesome" lists are often great resources!
:::

## Summary

-   Quarto is a "batteries included" command line tool that shares syntax across output types and languages and can be used within many editors

-   Learn about revealjs presentations from this [slidedeck](https://github.com/hidyverse/quarto-reporting)

-   Send me feedback `r fontawesome::fa("comments")` <https://tinyurl.com/y2sbf58r>

![](images/qmd_render_schema.png){fig-alt="illustration of quarto's rendering process"}
